v0.10:
    ☐ Ускорить обновление метадаты: заменить удаление/создание на апдейт
    ☐ Добавить возможность передавать аргументы в *Generate и *Transform

v0.11:
    ☐ Режим демона
    ☐ datapipe-exporter для экспорта состояния таблиц

v0.12:
    ☐ Добавить схему данных как класс
    ☐ Нормальное управление схемами (полная схема в Table, а не частичная в Store)
    ☐ Причесать работу с primary_schema
    ☐ Поддержка сквозной сущности по схеме идентификации
    ☐ Реализовать автоименование у шагов

Backlog:
    ☐ Вынести интеграцию с Labelstudio в отдельную библиотеку datapipe-moderation
    ☐ Реализовать компиляцию из пайплайна в Prefect flow
    ☐ Внести интеграцию с Prefect в основную библиотеку
    ☐ Объединить шаг трансформации и объявление схем результирующих таблиц (сделать каталог опциональным)
    ☐ Считать хеш-сумму в Store
    ☐ Сделать MetaTable декоратором над транзакцией (или DataTable?)
    ☐ Сделать прогрессбар для gen_* шага
    ☐ Сделать возможность передавать fsspec urls в TableStoreFiledir, ex: zip://{label}/{id}_test.jpg::./CATALOG_DIR/archive.zip
    ☐ Сделать "контекст записи"/"контекст чтения" для TableDataStore чтобы можно было кешировать операции чтения
    ☐ Сделать синхронизацию DataStore с метадатой, как отдельный шаг
    
Ветка Label Studio:
    ☐ Починить баг с авторизацией в 1.0.2+ лейбел студии (в 1.0.1 работает)
        UPD: Баг на их стороне, починить пока не смогу, см. https://github.com/heartexlabs/label-studio/issues/1049
    ☐ Подумать об обработке Run в лейбел студии в случае, когда сервис не запущен
        Сценарий: если LS будет уничтожен и пересоздан, то наша синхронизация не зальет туда задачи заново (возможно, с разметкой)
    ☐ Идемпотентная запись задач в LS, если задача уже есть, то она должна обновляться, а не дублироваться

Archive:
  ✔ Работающий Transform без пересекающихся ключей @done(21-11-22 19:36) @project(v0.10)
  ✔ Аккуратный рефакторинг core_steps (функции run в Steps) @done(21-11-22 23:58) @project(v0.10)
  ✔ BatchGenerate через DatatableTransform @done(21-11-22 23:21) @project(v0.10)
  ✔ BatchTransform через DatatableTransform @done(21-11-22 23:58) @project(v0.10)
  ✔ UpdateExternalTableStep через DatatableTransform @done(21-11-23 00:10) @project(v0.10)
  ✔ Обобщить Transform и Generate через DTTransform @done(21-11-22 23:59) @project(v0.10)
  ✔ Объединить DatatableTransformStep с ComputeStep @done(21-11-23 00:24) @project(v0.10)
  ✔ Убрать обязательные inputs, outputs у PipelineStep @done(21-11-20 19:06) @project(v0.10)
  ✔ Убрать input_dts у BatchGenerateStep @done(21-11-20 19:06) @project(v0.10)
  ✔ Добавить шаг, который работает на уровне всей DataTable, а не батчей изменений @done(21-11-22 20:37) @project(v0.10)
  ✔ Решить что делать с подавлением исключений в BatchGenerateStep @done(21-12-18 23:55) @project(v0.11)
  ✔ Перенести логику создания подшагов пайплайна в PipelineStep @done(21-11-20 16:22) @project(build-compute)
  ✔ Слить dsl, step, compute @done(21-11-20 16:21) @project(build-compute)
  ✔ Перенести RunConfig в run_config @done(21-11-20 16:22) @project(build-compute)
  ✔ Добавить список фильтров как тип @done(21-11-20 16:44) @project(Filter)
  ✔ Many-to-one, one-to-many @done(21-11-20 16:44) @project(TODO)
  ✔ Переехать на SQLAlchemy 1.4 https://www.sqlalchemy.org/blog/2021/03/15/sqlalchemy-1.4.0-released/ @done(21-11-20 16:44) @project(TODO)
  ✔ Добавить фильтрацию для gen_process_many @done(21-10-26 23:27) @project(Filter)
  ✔ Объединить DataTable и MetaTable @done(21-10-03 19:07) @project(One-to-many)
  ✔ Перенести создание MetaTable в DataStore @done(21-09-26 21:03) @project(One-to-many)
  ✔ Перенести логику работы со списком таблиц из dsl.Catalog в DataStore @done(21-09-26 21:03) @project(One-to-many)
  ✔ Передвинуть глобальные функции inc_process, gen_process вниз datatable @done(21-09-26 21:05) @project(One-to-many)
  ✔ get_metadata @done(21-10-03 19:07) @project(One-to-many)
  ✔ get_existing_idx @done(21-10-03 19:07) @project(One-to-many)
  ✔ get_table_debug_info @done(21-10-03 19:07) @project(One-to-many)
  ✔ store_chunk @done(21-10-03 19:07) @project(One-to-many)
  ✔ Реализовать общие тесты для всех table_store @done(21-09-26 16:48) @project(One-to-many)
  ✔ Реализовать честный апдейт данных в MetaTable @done(21-07-31 01:03) @project(One-to-many)
  ✔ Вынести работу с БД в MetaTable отдельно от DBStore @done(21-07-24 21:40) @project(One-to-many)
  ✔ Добавить поддержку дополнительных полей в MetaTable @done(21-09-26 14:46) @project(One-to-many)
  ✔ Добавить индексацию Store на основе индексного датафрейма (а не индекса) @done(21-09-26 14:46) @project(One-to-many)
  ✔ Перейти с id индекса, на произвольный индекс в DataTable @done(21-09-26 14:46) @project(One-to-many)
  ✔ Удалить ConstIdx из Store @done(21-09-26 14:46) @project(TODO)
  ✔ Не удалять метаданные при удалении строк @done(21-09-26 14:47) @project(TODO)
  ✔ Поддержка внешних хранилищ для данных (папка с файлами) @project(TODO)
  ✔ Полноценные тесты @project(TODO)
  ✔ Использование конструктора запросов SQLAlchemy вместо сырого SQL @project(TODO)
  ✔ Поддержка SQLite @project(TODO)
  ✔ Добавить тест на sign up @project(Ветка Label Studio)
  ✔ Унести Project Setting в Лейбел Студию внутрь @project(Ветка Label Studio)
  ✔ Унести добавление unique_id в Лейбел Студию внутрь @project(Ветка Label Studio)
  ✔ Переписать получение текущей разметки через yield @project(Ветка Label Studio)
  ✔ Добавить параметры и тесты на data, annotations и predictions @project(Ветка Label Studio)
